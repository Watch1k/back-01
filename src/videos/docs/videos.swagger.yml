tags:
  - name: Videos
    description: API for managing videos

paths:
  /api/videos:
    get:
      summary: Get a list of all videos
      tags: [ Videos ]
      responses:
        200:
          description: List of all videos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoListOutput'
    post:
      summary: Add a new video
      tags: [ Videos ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoInput'
      responses:
        201:
          description: The video was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoOutput'
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/videos/{id}:
    get:
      summary: Get a video by ID
      tags: [ Videos ]
      parameters:
        - in: path
          name: id
          required: true
          description: "The unique identifier of the video"
          schema:
            type: integer
            example: 2
      responses:
        200:
          description: The requested video
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoOutput'
        404:
          description: Video not found
    put:
      summary: Update a video by ID
      tags: [ Videos ]
      parameters:
        - in: path
          name: id
          required: true
          description: "The unique identifier of the video"
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoUpdateInput'
      responses:
        204:
          description: Video updated successfully
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        404:
          description: Video not found
    delete:
      summary: Delete a video by ID
      tags: [ Videos ]
      parameters:
        - in: path
          name: id
          required: true
          description: "The unique identifier of the video"
          schema:
            type: integer
            example: 2
      responses:
        204:
          description: Video deleted successfully
        404:
          description: Video not found
components:
  schemas:
    VideoAttributes:
      type: object
      required:
        - title
        - url
        - duration
        - category
        - tags
      properties:
        title:
          type: string
          description: "The title of the video"
          example: "Introduction to TypeScript"
        description:
          type: string
          nullable: true
          description: "A description of the video content"
          example: "Learn the basics of TypeScript in this introductory tutorial."
        url:
          type: string
          description: "The URL where the video can be accessed"
          example: "https://example.com/videos/typescript-intro"
        thumbnailUrl:
          type: string
          nullable: true
          description: "The URL of the video thumbnail image"
          example: "https://example.com/thumbnails/typescript-intro.jpg"
        duration:
          type: integer
          description: "The duration of the video in seconds"
          example: 600
        category:
          type: string
          enum: [ education, entertainment, sports ]
          description: "The category of the video"
          example: "education"
        tags:
          type: array
          items:
            type: string
          description: "Tags associated with the video for categorization and search"
          example: [ "typescript", "programming", "tutorial" ]
    Video:
      type: object
      required:
        - id
        - title
        - url
        - duration
        - category
        - tags
        - createdAt
      properties:
        id:
          type: integer
          description: "The unique identifier for the video"
          example: 2
        title:
          type: string
          description: "The title of the video"
          example: "Introduction to TypeScript"
        description:
          type: string
          nullable: true
          description: "A description of the video content"
          example: "Learn the basics of TypeScript in this introductory tutorial."
        url:
          type: string
          description: "The URL where the video can be accessed"
          example: "https://example.com/videos/typescript-intro"
        thumbnailUrl:
          type: string
          nullable: true
          description: "The URL of the video thumbnail image"
          example: "https://example.com/thumbnails/typescript-intro.jpg"
        duration:
          type: integer
          description: "The duration of the video in seconds"
          example: 600
        category:
          type: string
          enum: [ education, entertainment, sports ]
          description: "The category of the video"
          example: "education"
        tags:
          type: array
          items:
            type: string
          description: "Tags associated with the video for categorization and search"
          example: [ "typescript", "programming", "tutorial" ]
        createdAt:
          type: string
          format: date-time
          description: "The date and time when the video was created"
          example: "2023-03-05T12:00:00Z"
    VideoInput:
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ type, attributes ]
          properties:
            type:
              type: string
              enum: [ videos ]
            attributes:
              $ref: '#/components/schemas/VideoAttributes'
    VideoUpdateInput:
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ type, id, attributes ]
          properties:
            type:
              type: string
              enum: [ videos ]
            id:
              type: string
              example: "2"
            attributes:
              $ref: '#/components/schemas/VideoAttributes'
    VideoOutput:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - id
            - attributes
          properties:
            type:
              type: string
              enum: [ videos ]
              example: videos
            id:
              type: string
              example: "2"
            attributes:
              $ref: '#/components/schemas/VideoAttributes'
    VideoListOutput:
      type: object
      required: [ meta, data ]
      properties:
        meta:
          type: object
        data:
          type: array
          items:
            $ref: '#/components/schemas/VideoUpdateInput'
    ValidationError:
      type: object
      properties:
        field:
          type: string
          example: "title"
        message:
          type: string
          example: "Invalid title"
    ValidationErrorResponse:
      type: object
      properties:
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'